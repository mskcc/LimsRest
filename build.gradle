buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE")
    }

}
apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'war'

if(target== 'dev'){
    copy {
        from "src/dev/resources/connect.txt"
        into "src/main/resources/"
    }
    copy {
        from "src/dev/RelatedRecords.java"
        into "src/main/java/org/mskcc/limsrest/staticstrings/"
    }
}
else {
    copy {
        from "src/production/resources/connect.txt"
        into "src/main/resources/"
    }
    copy {
        from "src/production/RelatedRecords.java"
        into "src/main/java/org/mskcc/limsrest/staticstrings/"
    }
}

war{
    baseName = 'LimsRest'
}

jar {
    baseName = 'lims-rest-service'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    providedRuntime
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile 'javax.servlet:jstl:1.2'
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile group: 'com.google.guava', name: 'guava', version: '18.+'
    compile fileTree(dir: 'libs', include: '*.jar')
    testCompile 'io.rest-assured:rest-assured:3.0.1'
    testCompile("junit:junit")
    testCompile("org.mockito:mockito-core:1.10.19")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

bootRun {
    if (System.getProperty('DEBUG', 'false') == 'true')
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5006'
}

tasks.withType(Test) {
    testLogging {
        events "standardOut", "standardError", "started", "passed", "skipped", "failed"
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

task integrationTest(type: Test) {
    if (System.getProperty('DEBUG', 'false') == 'true')
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5006'

    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    description = "Integration Tests"
    outputs.upToDateWhen { false }
}

