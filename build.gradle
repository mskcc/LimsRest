group 'org.mskcc.limsrest'
version '1.0.0-SNAPSHOT'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE")
    }

}
apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'war'

if(target== 'dev'){
    copy {
        from "src/dev/resources/connect.txt"
        into "src/main/resources/"
    }
    copy {
        from "src/dev/resources/slack.properties"
        into "src/main/resources/"
    }
    copy {
        from "src/dev/RelatedRecords.java"
        into "src/main/java/org/mskcc/limsrest/staticstrings/"
    }

}
else {
    copy {
        from "src/production/resources/connect.txt"
        into "src/main/resources/"
    }
    copy {
        from "src/production/resources/slack.properties"
        into "src/main/resources/"
    }
    copy {
        from "src/production/RelatedRecords.java"
        into "src/main/java/org/mskcc/limsrest/staticstrings/"
    }
}

war{
    baseName = 'LimsRest##'
}

jar {
    baseName = 'lims-rest-service'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
    mavenLocal()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    providedRuntime
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    providedRuntime ("org.springframework.boot:spring-boot-starter-tomcat")

    compile ("org.springframework.boot:spring-boot-starter-web")
    compile ("org.springframework.boot:spring-boot-starter-security")
    compile ('javax.servlet:jstl:1.2')
    compile (group: 'com.google.guava', name: 'guava', version: '18.+')
    compile (group: 'org.mskcc.common', name:'common-domain', version: '2.1.0-SNAPSHOT')
    compile fileTree (dir: 'libs', include: '*.jar')

    testCompile ('io.rest-assured:rest-assured:3.0.1')
    testCompile ("junit:junit")
    testCompile ("org.mockito:mockito-core:1.10.19")
    testCompile (group: 'org.springframework', name: 'spring-test', version: '4.1.7.RELEASE')
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

bootRun {
    if (System.getProperty('DEBUG', 'false') == 'true')
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5006'
    systemProperty 'server.port', '5007'
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

task integrationTest(type: Test) {
    if (System.getProperty('DEBUG', 'false') == 'true')
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5006'

    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    description = "Integration Tests"
    outputs.upToDateWhen { false }
}

