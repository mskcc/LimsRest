plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version "2.5.10"
    id 'io.spring.dependency-management' version "1.1.0"
}

group = 'org.mskcc.limsrest'
sourceCompatibility = '17'

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
}

repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'https://jitpack.io' }
        maven { url "${nexusUrlReleases}"
            allowInsecureProtocol = true}
}

if (target == 'dev'){
    copy {
        from "src/dev/resources"
        into "src/main/resources"
    }
    //version += 'd'
} else if(target == 'test'){
    copy {
        from "src/test-site-res/resources"
        into "src/main/resources"
    }
} else if(target == 'local'){
    copy {
        from "src/local/resources"
        into "src/main/resources"
    }
    version += 'l'
} else {
    copy {
        from "src/production/resources"
        into "src/main/resources"
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "${nexusUrlReleases}"
        allowInsecureProtocol = true}
    maven { url 'https://jitpack.io' }
}

configurations {
    providedRuntime
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    implementation fileTree (dir: 'libs', include: '*.jar')
    implementation('com.github.mskcc:smile-messaging-java:1.3.1.RELEASE')
    implementation('com.github.mskcc:smile-commons:1.3.1.RELEASE')
    implementation 'com.sun.activation:javax.activation:1.2.0'

    implementation 'com.google.code.gson:gson:2.8.6'
    implementation group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.23'
    implementation group: 'org.json', name: 'json', version: '20180130'

    testImplementation(group: 'org.springframework', name: 'spring-test', version: '5.1.6.RELEASE')
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    implementation "io.springfox:springfox-swagger-ui:2.9.2"
    implementation "io.springfox:springfox-swagger2:2.9.2"

    implementation "org.springframework.boot:spring-boot-starter-security:2.5.10"
    implementation "org.springframework.boot:spring-boot-starter-tomcat:2.5.10"
    implementation "org.springframework.boot:spring-boot-starter-web:2.5.10"
    testImplementation(group: 'org.springframework', name: 'spring-test', version: '5.1.6.RELEASE')
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.5.10'

    implementation ('javax.servlet:jstl:1.2')
    implementation "com.google.guava:guava:16+"

    implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    
    // Log4j2 dependencies for Velox plugin compatibility
    implementation 'org.apache.logging.log4j:log4j-core:2.17.2'
    implementation 'org.apache.logging.log4j:log4j-api:2.17.2'
    // Removed log4j-slf4j-impl to avoid conflict with Spring Boot's SLF4J setup

    implementation 'junit:junit:4.13.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testImplementation ('io.rest-assured:rest-assured:3.0.1')
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.16.0'
    implementation('org.junit.jupiter:junit-jupiter:5.4.0')
    implementation 'org.assertj:assertj-core:3.9.0'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
}

tasks.named('test', Test) {
    useJUnitPlatform()

    maxHeapSize = '1G'

    testLogging {
        events "passed"
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    description = "Integration Tests"
    outputs.upToDateWhen { false }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "${nexusUrlReleases}"
        allowInsecureProtocol = true}
}